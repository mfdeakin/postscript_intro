%Define the number of points per inch
/ppi 72 def
%Define a procedure to convert from points to inches
/in {ppi mul} def

%Set the page size
%letter and a4 are good defaults
%Presets:
%letter
%a4
%a3
%legal
%ledger
%tabloid
%Custom size:
<< /PageSize [4 in 4 in] >> setpagedevice

%Create a triangle
newpath
2 in 2 in moveto
4 in 2 in lineto
4 in 4 in lineto
closepath
%Define parameters for drawing the triangle
10 setlinewidth
%0.0 is black, 1.0 is white
0.8 setgray
%Draw the triangle
fill
%And create a page with the triangle
showpage

<< /PageSize [5 in 8 in] >> setpagedevice

/vpos 7 in def
/newl { /vpos vpos 1 in sub def
	1 in vpos moveto
} def

%Set up our font!
/Helvetica findfont
1 in scalefont
setfont
%Create our text
1 in vpos moveto
0.3 setgray
%Define our string
(My Text) show
newl
1 in vpos moveto
3.14159256 20 string cvs show
%Add them to the page

%Create a new page with the text
showpage

<< /PageSize [4 in 7.5 in] >> setpagedevice

%Move the origin
1 in 10 in translate
%Flip everything over the x axis
1 -1.8 scale
%Rotation changes after 45, 135, and 180 degrees...
%I'm pretty sure this is a problem with the pdf, not PS
%Rotation is also additive
45 rotate
0 rotate
%Test our changes
1 in 1 in moveto
(Testing) show
showpage

<< /PageSize [5 in 10 in] >> setpagedevice

/neg { -1 mul } def

/staredge { 36 sin in
	    1 35 sin neg add in
	    rlineto
	    36 sin in
	    -1 35 sin add in
	    rlineto
	    72 rotate
} def
%Draw a star!!!
%Here's the center
2 in 5 in translate

newpath
-36 sin in
36 cos in
moveto

2 2 scale

5 {staredge} repeat
closepath
%Save the star so we don't have to draw it again
gsave
0.0 1.0 0.0 setrgbcolor
%Fill before stroking unless we want the fill covering the stroke
fill

newpath
%Center of the circle
0.2935 in 1.21425 in
%Radius of the circle
1 35 sin sub 36 cos add in 0.822 mul
%Full circle
0 360
0.0 0.0 0.0 setrgbcolor
arc stroke

%Get our star back!
grestore
1.0 0.0 0.0 setrgbcolor
%Now we stroke so that we get the full outline
stroke
showpage

%Misc

%Postscript is not far from the level of LISP when you can do things like the following:
/savebuf 0 def
/savelast {/savebuf exch def} def
%This saves the last item on the stack into savebuf
%Just call savebuf to get it back!
%Used in implementing these functions, so it's not safe

%Let's add some list functions!!! (So it's like LISP)

%array el aprepend
%Puts el in the front of the array
/aprepend {
	exch
	aload
	length 1 add array
	astore
} def

%Does the same thing aprepend does but with executable arrays
/aprependx {
	prepend
	cvx
} def

%array el append
%Appends el to array
/append {
	savelast
	aload
	savebuf
	exch
	length 1 add array
	astore
} def

%Does the same thing append does but with executable arrays
/appendx {
	append
	cvx
} def

%array apop
%Removes the last element from array and puts it on the stack
/apop {
	aload
	exch
	savelast
	length 1 sub array
	astore
	savebuf
} def

%Does the same thing apop does but with executable arrays
/apopx {
	apop
	cvx
} def

%array idx aslice
%Creates two arrays out of one at idx (The element at idx is the beginning of the second array)
/aslice {
	savelast
	aload
	length
	savebuf sub array
	astore
	savebuf
	exch
	savelast
	array
	astore
	savebuf
} def

%Does the same thing aslice does but with executable arrays
/aslicex {
	aslice
	cvx
} def